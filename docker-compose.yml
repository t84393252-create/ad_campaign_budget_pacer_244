version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: budget-pacer-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pacer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:14-alpine
    container_name: budget-pacer-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: budget_pacer
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pacer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  pacer-service:
    build: ./pacer-service
    container_name: budget-pacer-core
    environment:
      REDIS_ADDR: redis:6379
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/budget_pacer?sslmode=disable
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - pacer-network
    restart: unless-stopped

  api:
    build: ./api
    container_name: budget-pacer-api
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/budget_pacer
      REDIS_URL: redis://redis:6379
      PACER_SERVICE_URL: http://pacer-service:8080
      PORT: 8000
    ports:
      - "8000:8000"
    depends_on:
      - pacer-service
    networks:
      - pacer-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: budget-pacer-prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - pacer-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: budget-pacer-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-dashboard.json:/var/lib/grafana/dashboards/dashboard.json
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - pacer-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: budget-pacer-nginx
    volumes:
      - ./dashboard:/usr/share/nginx/html
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - pacer-network
    restart: unless-stopped

networks:
  pacer-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: